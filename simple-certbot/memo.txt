Setting up a Dockerized Flask application with SSL using Certbot involves several steps. Here’s a comprehensive guide to achieve this:

Step 1: Set Up Your Flask Application
Create a simple Flask application.

app.py:

python
Copy code
from flask import Flask
app = Flask(__name__)

@app.route('/')
def hello_world():
    return 'Hello, World!'

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000)
requirements.txt:

makefile
Copy code
Flask==2.0.1
Step 2: Create a Dockerfile
Create a Dockerfile to containerize your Flask application.

Dockerfile:

Dockerfile
Copy code
# Use the official Python image
FROM python:3.9-slim

# Set the working directory
WORKDIR /usr/src/app

# Copy the requirements file and install dependencies
COPY requirements.txt ./
RUN pip install --no-cache-dir -r requirements.txt

# Copy the rest of the application code
COPY . .

# Expose the port the app runs on
EXPOSE 5000

# Define the command to run the app
CMD ["python", "app.py"]
Step 3: Set Up Nginx with Docker
Create an Nginx configuration file to act as a reverse proxy for your Flask application.

nginx.conf:

nginx
Copy code
server {
    listen 80;
    server_name yourdomain.com;

    location / {
        proxy_pass http://flask_app:5000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}
Step 4: Create a Docker Compose File
Create a docker-compose.yml file to define the Flask app and Nginx services.

docker-compose.yml:

yaml
Copy code
version: '3'
services:
  flask_app:
    build: .
    container_name: flask_app
    expose:
      - "5000"

  nginx:
    image: nginx:latest
    container_name: nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    depends_on:
      - flask_app

  certbot:
    image: certbot/certbot
    container_name: certbot
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do sleep 6h & wait $${!}; certbot renew; done;'"
Step 5: Obtain SSL Certificates Using Certbot
Run Certbot to obtain the SSL certificates. Make sure your DNS is pointing to your server.

bash
Copy code
docker-compose run --rm --entrypoint \
  "certbot certonly --webroot --webroot-path=/var/www/certbot \
  --email youremail@domain.com --agree-tos --no-eff-email \
  -d yourdomain.com" certbot
Step 6: Update Nginx Configuration for SSL
Update the nginx.conf file to handle SSL.

nginx.conf:

nginx
Copy code
server {
    listen 80;
    server_name yourdomain.com;

    location / {
        proxy_pass http://flask_app:5000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
    }

    # Redirect all HTTP requests to HTTPS
    if ($scheme != "https") {
        return 301 https://$host$request_uri;
    }
}

server {
    listen 443 ssl;
    server_name yourdomain.com;

    ssl_certificate /etc/letsencrypt/live/yourdomain.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/yourdomain.com/privkey.pem;

    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers on;
    ssl_ciphers "ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256";

    location / {
        proxy_pass http://flask_app:5000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}
Step 7: Restart the Docker Services
Restart your Docker services to apply the changes.

bash
Copy code
docker-compose up -d
Step 8: Automate Certificate Renewal
Certbot container in the docker-compose.yml already handles the certificate renewal process. Ensure it’s running and renews the certificates periodically.

With these steps, you should have a Dockerized Flask application running with Nginx and secured with SSL certificates from Certbot. Adjust the configurations as needed for your specific use case

# 1. docker force rebuild after change
    docker-compose up --build
# 2. docker restart service
    docker-compose up -d



